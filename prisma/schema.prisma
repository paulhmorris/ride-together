datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  Password?
  firstName String?
  lastName  String?
  nickname  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      UserRole  @default(USER)

  clubs            Club[]
  joinedRides      Ride[]            @relation(name: "joinedRides")
  createdRides     Ride[]            @relation(name: "createdRides")
  clubJoinRequests ClubJoinRequest[]
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Ride {
  id          String  @id @default(cuid())
  name        String?
  description String?
  riders      User[]  @relation("joinedRides")
  creator     User    @relation(name: "createdRides", fields: [creatorId], references: [id])
  creatorId   String

  startsAt  DateTime?
  duration  Int?
  distance  Float?
  // pace      Pace      @relation(fields: [paceId], references: [id])
  // paceId    Int
  club      Club?     @relation(fields: [clubId], references: [id])
  clubId    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  coords Unsupported("geometry(Point, 4326)")?

  @@index([coords], name: "location_idx", type: Gist)
}

// model Pace {
//   id         Int    @id @default(autoincrement())
//   speedRange String
//   avgSpeed   Int
//   rides      Ride[]
// }

model Club {
  id           String            @id @default(cuid())
  name         String
  description  String?
  city         String?
  state        String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  isPrivate    Boolean           @default(false)
  members      User[]
  rides        Ride[]
  joinRequests ClubJoinRequest[]
}

model ClubJoinRequest {
  id        String                @id @default(cuid())
  user      User                  @relation(fields: [userId], references: [id])
  userId    String
  club      Club                  @relation(fields: [clubId], references: [id])
  clubId    String
  status    ClubJoinRequestStatus
  closedOn  DateTime?
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  @@unique([userId, clubId])
}

enum ClubJoinRequestStatus {
  SENT
  APPROVED
  REJECTED
}
